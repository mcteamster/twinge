service: twinge-service
frameworkVersion: '3'

custom:
  tableName: 'gamestate-table-${sls:stage}'

provider:
  name: aws
  stage: dev
  region: ap-southeast-2
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableName}
  websocketsApiName: twinge-service-websockets
  websocketsApiRouteSelectionExpression: $request.body.action

functions:
  connections:
    handler: handlers/connections.handler
    events:
      - websocket:  
          route: $connect
      - websocket:
          route: $disconnect
  default:
    handler: handlers/default.handler
    events: 
      - websocket: $default

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
