service: twinge-service
frameworkVersion: "3"

custom:
  hostname: "twinge-service.mcteamster.com"
  connectionTableName: "connection-table-${sls:stage}"
  gameTableName: "game-table-${sls:stage}"
  s3Bucket: "twinge-client"

provider:
  name: aws
  endpointType: regional
  stage: dev
  region: ap-southeast-2
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::Join: ["", [Fn::GetAtt: [ConnectionTable, Arn], "*"]]
            - Fn::Join: ["", [Fn::GetAtt: [GameTable, Arn], "*"]]
  environment:
    CONNECTION_TABLE: ${self:custom.connectionTableName}
    GAME_TABLE: ${self:custom.gameTableName}
    HOSTNAME: ${self:custom.hostname}
  websocketsApiName: twinge-service-websockets
  websocketsApiRouteSelectionExpression: $request.body.action

functions:
  connect:
    handler: handlers/connect.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  play:
    handler: handlers/play.handler
    events:
      - websocket:
          route: play
          routeResponseSelectionExpression: $default

resources:
  Resources:
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: gameId
            KeySchema:
              - AttributeName: gameId
                KeyType: "HASH"
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.connectionTableName}
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: roomCode
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: roomCode
            KeySchema:
              - AttributeName: roomCode
                KeyType: "HASH"
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.gameTableName}
        TimeToLiveSpecification:
          AttributeName: expiryTimeEpoch
          Enabled: 'true'
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
           - twinge.mcteamster.com
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: 'arn:aws:acm:us-east-1:922236493844:certificate/4d4b5f6a-4387-4f85-8610-124026c44fb7'
            SslSupportMethod: sni-only