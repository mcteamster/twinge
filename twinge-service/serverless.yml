service: twinge-service
frameworkVersion: "3"

custom:
  hostname: "twinge.mcteamster.com"
  connectionTableName: "connection-table-${sls:stage}"
  gameTableName: "game-table-${sls:stage}"

provider:
  name: aws
  stage: dev
  region: ap-southeast-2
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::Join: ["", [Fn::GetAtt: [ConnectionTable, Arn], "*"]]
            - Fn::Join: ["", [Fn::GetAtt: [GameTable, Arn], "*"]]
  environment:
    CONNECTION_TABLE: ${self:custom.connectionTableName}
    GAME_TABLE: ${self:custom.gameTableName}
    HOSTNAME: ${self:custom.hostname}
  websocketsApiName: twinge-service-websockets
  websocketsApiRouteSelectionExpression: $request.body.action

functions:
  connect:
    handler: handlers/connect.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  default:
    handler: handlers/default.handler
    events:
      - websocket:
          route: $default
  play:
    handler: handlers/play.handler
    events:
      - websocket:
          route: play
          routeResponseSelectionExpression: $default

resources:
  Resources:
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: gameId
            KeySchema:
              - AttributeName: gameId
                KeyType: "HASH"
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.connectionTableName}
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: roomCode
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: roomCode
            KeySchema:
              - AttributeName: roomCode
                KeyType: "HASH"
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.gameTableName}
