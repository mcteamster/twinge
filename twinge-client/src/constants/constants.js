// Enable Regions by uncommenting the flags
export const FLAGS = {
  'AU': 'ğŸ‡¦ğŸ‡º',
  'JP': 'ğŸ‡¯ğŸ‡µ',
  'SG': 'ğŸ‡¸ğŸ‡¬',
  'IN': 'ğŸ‡®ğŸ‡³',
  'EU': 'ğŸ‡ªğŸ‡º',
  'UK': 'ğŸ‡¬ğŸ‡§',
  'BR': 'ğŸ‡§ğŸ‡·',
  'EAST': 'ğŸ‡ºğŸ‡¸',
  'WEST': 'ğŸ‡ºğŸ‡¸',
}

export const ENDPOINTS = {
  'AU': 'wss://au.twinge.mcteamster.com',      // Sydney AU ğŸ‡¦ğŸ‡º
  'JP': 'wss://jp.twinge.mcteamster.com',      // Tokyo JP ğŸ‡¯ğŸ‡µ
  'SG': 'wss://sg.twinge.mcteamster.com',      // Singapore SG ğŸ‡¸ğŸ‡¬
  'IN': 'wss://in.twinge.mcteamster.com',      // Mumbai IN ğŸ‡®ğŸ‡³
  'EU': 'wss://eu.twinge.mcteamster.com',      // Frankfurt EU ğŸ‡ªğŸ‡º
  'UK': 'wss://uk.twinge.mcteamster.com',      // London UK ğŸ‡¬ğŸ‡§
  'BR': 'wss://br.twinge.mcteamster.com',      // Sao Paulo BR ğŸ‡§ğŸ‡·
  'EAST': 'wss://use.twinge.mcteamster.com', // Washington D.C. US ğŸ‡ºğŸ‡¸
  'WEST': 'wss://usw.twinge.mcteamster.com', // San Francisco US ğŸ‡ºğŸ‡¸
  'DEFAULT': 'wss://eu.twinge.mcteamster.com' // Default to EU as the most central server
}

export const getRegionFromCode = (roomCode) => {
  const lastLetter = roomCode[roomCode.length - 1].toUpperCase();
  let region;

  if ('BC'.includes(lastLetter)) {
    region = 'AU'; // Sydney AU ğŸ‡¦ğŸ‡º
  } else if ('DF'.includes(lastLetter)) {
    region = 'JP'; // Tokyo JP ğŸ‡¯ğŸ‡µ
  } else if ('GH'.includes(lastLetter)) {
    region = 'SG'; // Singapore SG ğŸ‡¸ğŸ‡¬
  } else if ('JK'.includes(lastLetter)) {
    region = 'IN'; // Mumbai IN ğŸ‡®ğŸ‡³
  } else if ('LM'.includes(lastLetter)) {
    region = 'EU'; // Frankfurt EU ğŸ‡ªğŸ‡º
  } else if ('NP'.includes(lastLetter)) {
    region = 'UK'; // London UK ğŸ‡¬ğŸ‡§
  } else if ('QR'.includes(lastLetter)) {
    region = 'BR'; // Sao Paolo BR ğŸ‡§ğŸ‡·
  } else if ('ST'.includes(lastLetter)) {
    region = 'EAST'; // Washington D.C. US ğŸ‡ºğŸ‡¸
  } else if ('VW'.includes(lastLetter)) {
    region = 'WEST'; // San Francisco US ğŸ‡ºğŸ‡¸
  } else {
    region = 'DEFAULT';
  }

  console.debug(`Identified Region: ${region}`)
  return region;
}